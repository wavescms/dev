# .github/workflows/deploy.yml
name: Deploy to Production

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H dev.neurobytotalstay.co.za >> ~/.ssh/known_hosts
          
      - name: Deploy to server
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no dev@dev.neurobytotalstay.co.za << 'EOF'
            # Setup logging
            LOG_DIR="/home/dev/deployment_logs"
            mkdir -p "$LOG_DIR"
            LOG_FILE="$LOG_DIR/deploy-$(date +%Y%m%d%H%M%S).log"

            # Function to log messages
            log() {
              echo "[$(date +"%Y-%m-%d %H:%M:%S")] $1" | tee -a "$LOG_FILE"
            }

            log "Starting deployment process"

            # Create timestamp-based deployment directory
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            DEPLOY_DIR="/home/dev/deployments/$TIMESTAMP"
            LIVE_LINK="/home/dev/live"
            STORAGE_DIR="/home/dev/storage"
            VENDOR_DIR="/home/dev/vendor"
            NODEMODULES_DIR="/home/dev/node_modules"

            log "Creating deployment directory: $DEPLOY_DIR"
            mkdir -p "$DEPLOY_DIR" || { log "ERROR: Failed to create deployment directory"; exit 1; }

            # Clone repository
            log "Cloning repository to deployment directory"
            git clone https://github.com/wavescms/dev.git "$DEPLOY_DIR" || { log "ERROR: Git clone failed"; exit 1; }

            # Ensure directory exists before changing into it
            if [ ! -d "$DEPLOY_DIR" ]; then
              log "ERROR: Deployment directory does not exist. Aborting."
              exit 1
            fi

            log "Changing to deployment directory"
            cd "$DEPLOY_DIR" || { log "ERROR: Failed to change directory to DEPLOY_DIR"; exit 1; }

            # Verify we're in the right directory
            pwd | tee -a "$LOG_FILE"
            
            # Ensure shared directories exists
            log "Ensuring storage directory exists"
            mkdir -p "$STORAGE_DIR"
            log "Ensuring shared directories exist"
            mkdir -p "$VENDOR_DIR"
            mkdir -p "$NODEMODULES_DIR"

            # Create symbolic link for shared directories
            log "Creating symbolic link for storage"
            rm -rf "$DEPLOY_DIR/storage"
            ln -s "$STORAGE_DIR" "$DEPLOY_DIR/storage"
            log "Creating symlink for vendor directory"
            rm -rf "$DEPLOY_DIR/vendor"
            ln -s "$VENDOR_DIR" "$DEPLOY_DIR/vendor"

            # Copy .env file
            log "Copying .env file"
            cp /home/dev/.env "$DEPLOY_DIR/.env" || { log "ERROR: Failed to copy .env file"; exit 1; }

            # Install dependencies
            log "Installing composer dependencies"
            composer install --no-interaction --no-dev --optimize-autoloader || { log "ERROR: Composer install failed"; exit 1; }

            log "Running database migrations"
            php artisan migrate --force || { log "ERROR: Artisan migrate failed"; exit 1; }

            log "Installing npm dependencies"
            npm install --prefer-offline --no-audit --legacy-peer-deps || { log "ERROR: NPM install failed"; exit 1; }
            # npm install || { log "ERROR: NPM install failed"; exit 1; }

            log "Building frontend assets"
            npm run build || { log "ERROR: NPM build failed"; exit 1; }
            
            
            # Ensure /home/dev/live is removed if it's a directory or an old symlink
            if [ -d "/home/dev/live" ] || [ -L "/home/dev/live" ]; then
              log "Removing existing /home/dev/live"
              rm -rf /home/dev/live
            fi
            
            # Create a new symlink pointing to the latest deployment
            log "Creating new live symlink: /home/dev/live -> $DEPLOY_DIR"
            ln -s "$DEPLOY_DIR" /home/dev/live
            
            # Verify that the symlink was created correctly
            if [ "$(readlink /home/dev/live)" != "$DEPLOY_DIR" ]; then
              log "ERROR: Failed to create correct live symlink!"
              exit 1
            fi

            log "Live symlink successfully updated to: $(readlink /home/dev/live)"

            # Clear Laravel cache
            log "Clearing Laravel cache"
            cd "$LIVE_LINK"
            php artisan cache:clear
            php artisan config:clear
            php artisan route:clear
            php artisan view:clear
            php artisan optimize
            
            log "Restarting PHP-FPM to apply changes"
            sudo systemctl restart php8.3-fpm || { log "ERROR: Failed to restart PHP-FPM"; exit 1; }

            log "Restarting Nginx (if needed)"
            sudo systemctl restart nginx || { log "ERROR: Failed to restart Nginx"; exit 1; }

            # Keep only the last 5 deployments
            log "Cleaning up old deployments"
            cd /home/dev/deployments
            ls -t | tail -n +6 | xargs -I {} rm -rf {}

            # Keep only the last 10 log files
            log "Cleaning up old log files"
            cd "$LOG_DIR"
            ls -t | tail -n +11 | xargs -I {} rm {}

            log "Deployment completed successfully!"
          EOF