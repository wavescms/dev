name: Deploy to Production

on:
  push:
    branches:
      - main

env:
  USER: ${{ vars.DEPLOY_USER }}
  DOMAIN: ${{ vars.DEPLOY_DOMAIN }}
  HOME_DIR: ${{ vars.DEPLOY_HOME }}
  LOG_DIR: ${{ vars.DEPLOY_LOGS }}
  DEPLOYMENTS_DIR: ${{ vars.DEPLOY_PATH }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      #- name: Setup SSH
      #  uses: webfactory/ssh-agent@v0.7.0
      #  with:
      #    ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          
      #- name: Add host key
      #  run: |
      #    mkdir -p ~/.ssh
      #    ssh-keyscan -H $DOMAIN >> ~/.ssh/known_hosts
          
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $DOMAIN >> ~/.ssh/known_hosts
          
      - name: Deploy to server
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)  # Generate timestamp before SSH
          STORAGE_DIR="$HOME_DIR/storage"
          VENDOR_DIR="$HOME_DIR/vendor"
          LIVE_LINK="$HOME_DIR/live"
          
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $USER@$DOMAIN << EOF
            # Load environment variables inside SSH
            HOME_DIR="$HOME_DIR"
            LOG_DIR="$LOG_DIR"
            DEPLOYMENTS_DIR="$DEPLOYMENTS_DIR"
            
            # TIMESTAMP=$(date +%Y%m%d%H%M%S)
            
            echo "HOME_DIR is: $HOME_DIR"
            echo "LOG_DIR is: $LOG_DIR"
            echo "DEPLOYMENTS_DIR is: $DEPLOYMENTS_DIR"
            echo "TIMESTAMP is: $TIMESTAMP"
            echo "STORAGE is: $STORAGE_DIR"
            echo "LIVE is: $LIVE_LINK"

            # Setup logging
            mkdir -p "$LOG_DIR"
            LOG_FILE="$LOG_DIR/deploy-$TIMESTAMP.log"
            
            echo "LOG_FILE is: $LOG_FILE"

            log() {
              echo "[$(date +"%Y-%m-%d %H:%M:%S")] $1" | tee -a "$LOG_FILE"
            }

            log "Starting deployment process"

            # Create timestamp-based deployment directory
            
            DEPLOY_DIR="$DEPLOYMENTS_DIR/$TIMESTAMP"

            log "Creating deployment directory: $DEPLOY_DIR"
            mkdir -p "$DEPLOY_DIR" || { log "ERROR: Failed to create deployment directory"; exit 1; }

            # Clone repository
            log "Cloning repository to deployment directory"
            git clone https://github.com/wavescms/dev.git "$DEPLOY_DIR" || { log "ERROR: Git clone failed"; exit 1; }

            # Ensure directory exists before changing into it
            if [ ! -d "$DEPLOY_DIR" ]; then
              log "ERROR: Deployment directory does not exist. Aborting."
              exit 1
            fi

            log "Changing to deployment directory"
            cd "$DEPLOY_DIR" || { log "ERROR: Failed to change directory to DEPLOY_DIR"; exit 1; }

            # Verify we're in the right directory
            pwd | tee -a "$LOG_FILE"
            
            # Ensure shared directories exist
            log "Ensuring storage directory exists"
            mkdir -p "$STORAGE_DIR"
            log "Ensuring shared directories exist"
            mkdir -p "$VENDOR_DIR"
            mkdir -p "$NODEMODULES_DIR"

            # Create symbolic link for shared directories
            log "Creating symbolic link for storage"
            rm -rf "$DEPLOY_DIR/storage"
            ln -s "$STORAGE_DIR" "$DEPLOY_DIR/storage"
            log "Creating symlink for vendor directory"
            rm -rf "$DEPLOY_DIR/vendor"
            ln -s "$VENDOR_DIR" "$DEPLOY_DIR/vendor"

            # Copy .env file
            log "Copying .env file"
            cp "$HOME_DIR/.env" "$DEPLOY_DIR/.env" || { log "ERROR: Failed to copy .env file"; exit 1; }

            # Install dependencies
            log "Installing composer dependencies"
            composer install --no-interaction --no-dev --optimize-autoloader || { log "ERROR: Composer install failed"; exit 1; }

            log "Running database migrations"
            php artisan migrate --force || { log "ERROR: Artisan migrate failed"; exit 1; }

            log "Installing npm dependencies"
            npm install --prefer-offline --no-audit --legacy-peer-deps || { log "ERROR: NPM install failed"; exit 1; }

            log "Building frontend assets"
            npm run build || { log "ERROR: NPM build failed"; exit 1; }

            # Ensure LIVE_LINK is removed if it's a directory or an old symlink
            if [ -d "$LIVE_LINK" ] || [ -L "$LIVE_LINK" ]; then
              log "Removing existing $LIVE_LINK"
              rm -rf "$LIVE_LINK"
            fi
            
            # Create a new symlink pointing to the latest deployment
            log "Creating new live symlink: $LIVE_LINK -> $DEPLOY_DIR"
            ln -s "$DEPLOY_DIR" "$LIVE_LINK"
            
            # Verify that the symlink was created correctly
            if [ "$(readlink "$LIVE_LINK")" != "$DEPLOY_DIR" ]; then
              log "ERROR: Failed to create correct live symlink!"
              exit 1
            fi

            log "Live symlink successfully updated to: $(readlink "$LIVE_LINK")"

            # Clear Laravel cache
            log "Clearing Laravel cache"
            cd "$LIVE_LINK"
            php artisan cache:clear
            php artisan config:clear
            php artisan route:clear
            php artisan view:clear
            php artisan optimize
            
            log "Restarting PHP-FPM to apply changes"
            sudo systemctl restart php8.3-fpm || { log "ERROR: Failed to restart PHP-FPM"; exit 1; }

            # Keep only the last 5 deployments
            log "Cleaning up old deployments"
            cd "$DEPLOYMENTS_DIR"
            ls -t | tail -n +6 | xargs -I {} rm -rf {}

            # Keep only the last 10 log files
            log "Cleaning up old log files"
            cd "$LOG_DIR"
            ls -t | tail -n +11 | xargs -I {} rm {}

            log "Deployment completed successfully!"
          EOF