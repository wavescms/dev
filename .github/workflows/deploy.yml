name: Deploy to Production

on:
  push:
    branches:
      - main

env:
  USER: ${{ vars.DEPLOY_USER }}
  DOMAIN: ${{ vars.DEPLOY_DOMAIN }}
  HOME_PATH: ${{ vars.DEPLOY_HOME_PATH }}
  LOG_PATH: ${{ vars.DEPLOY_LOGS_PATH }}
  DEPLOYMENTS_PATH: ${{ vars.DEPLOY_DEPLOYMENTS_PATH }}
  LIVE_PATH: ${{ vars.DEPLOY_LIVE_PATH }}
  STORAGE_PATH: ${{ vars.DEPLOY_STORAGE_PATH }}
  VENDOR_PATH: ${{ vars.DEPLOY_VENDOR_PATH }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
          
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $DOMAIN >> ~/.ssh/known_hosts
          
      - name: Set Timezone to Johannesburg
        run: sudo timedatectl set-timezone Africa/Johannesburg

      - name: Generate Timestamp
        run: |
          export TZ="Africa/Johannesburg"  # Set timezone for the session
          
      - name: Deploy to server
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          
          if [ -z "$LOG_PATH" ]; then
            LOG_PATH="$HOME_PATH/_logs"
          fi
          if [ -z "$DEPLOYMENTS_PATH" ]; then
            DEPLOYMENTS_PATH="$HOME_PATH/_deployments"
          fi
          if [ -z "$STORAGE_PATH" ]; then
            STORAGE_PATH="$HOME_PATH/storage"
          fi
          if [ -z "$VENDOR_PATH" ]; then
            VENDOR_PATH="$HOME_PATH/vendor"
          fi
          if [ -z "$LIVE_PATH" ]; then
            LIVE_PATH="$HOME_PATH/live"
          fi
          
          LOG_FILE="$LOG_PATH/deploy-$TIMESTAMP.log"
          DEPLOY_PATH="$DEPLOYMENTS_PATH/$TIMESTAMP"
          
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $USER@$DOMAIN << EOF
            
            echo "########################"
            echo "########################" | tee -a "$LOG_FILE"
            echo "TIMESTAMP is: $TIMESTAMP" | tee -a "$LOG_FILE"
            echo "HOME_PATH is: $HOME_PATH" | tee -a "$LOG_FILE"
            echo "STORAGE PATH is: $STORAGE_PATH" | tee -a "$LOG_FILE"
            echo "VENDOR_PATH is: $VENDOR_PATH" | tee -a "$LOG_FILE"
            echo "LOG_PATH is: $LOG_PATH" | tee -a "$LOG_FILE"
            echo "LOG_FILE is: $LOG_FILE" | tee -a "$LOG_FILE"
            echo "DEPLOYMENTS_PATH is: $DEPLOYMENTS_PATH" | tee -a "$LOG_FILE"
            echo "DEPLOY_PATH is: $DEPLOY_PATH" | tee -a "$LOG_FILE"
            echo "LIVE_PATH is: $LIVE_PATH" | tee -a "$LOG_FILE"
            echo "########################" | tee -a "$LOG_FILE"
            echo "########################"
            echo "" | tee -a "$LOG_FILE"
            
            echo "CHECK 1" | tee -a "$LOG_FILE"
            
            eval echo "[$(env date +"%Y-%m-%d %H:%M:%S")] Starting deployment process" | tee -a "$LOG_FILE"
            sleep 2
            eval echo "[$(env date +"%Y-%m-%d %H:%M:%S")] Check sleep 2" | tee -a "$LOG_FILE"

            # Setup logging
            echo "Creating logging directory: $LOG_PATH" | tee -a "$LOG_FILE"
            mkdir -p "$LOG_PATH" || { echo "ERROR: Failed to create logging directory"; exit 1; }
            

            # Create timestamp-based deployment directory
            echo "Creating deployment directory: $DEPLOY_PATH" | tee -a "$LOG_FILE"
            mkdir -p "$DEPLOY_PATH" || { echo "ERROR: Failed to create deployment directory"; exit 1; }

            # Clone repository
            echo "Cloning repository to deployment directory"
            git clone https://github.com/wavescms/dev.git "$DEPLOY_PATH" || { echo "ERROR: Git clone failed" | tee -a "$LOG_FILE"; exit 1; }
                        

            # Ensure directory exists before changing into it
            if [ ! -d "$DEPLOY_PATH" ]; then
              echo "ERROR: Deployment directory does not exist. Aborting." | tee -a "$LOG_FILE"; exit 1;
            fi

            echo "Changing to deployment directory" | tee -a "$LOG_FILE"
            cd "$DEPLOY_PATH" || { echo "ERROR: Failed to change directory to $DEPLOY_PATH" | tee -a "$LOG_FILE"; exit 1; }

            # Verify we're in the right directory
            pwd | tee -a "$LOG_FILE"
            
            # Ensure shared directories exist
            echo "Ensuring storage directory exists" | tee -a "$LOG_FILE"
            mkdir -p "$STORAGE_PATH" || { echo "ERROR: Failed to create storage directory $STORAGE_PATH"; exit 1; }
            # echo "Ensuring vendor directory exist" | tee -a "$LOG_FILE"
            # mkdir -p "$VENDOR_PATH" || { echo "ERROR: Failed to create vendor directory $VENDOR_PATH"; exit 1; }

            # Create symbolic link for shared directories
            echo "Creating symbolic link for storage" | tee -a "$LOG_FILE"
            rm -rf "$DEPLOY_PATH/storage"
            ln -s "$STORAGE_PATH" "$DEPLOY_PATH/storage"
            #echo "Creating symlink for vendor directory" | tee -a "$LOG_FILE"
            #rm -rf "$DEPLOY_DIR/vendor"
            #ln -s "$VENDOR_DIR" "$DEPLOY_DIR/vendor"
            
            

            # Copy .env file
            echo "Copying .env file" | tee -a "$LOG_FILE"
            cp "$HOME_PATH/.env" "$DEPLOY_PATH/.env" || { echo "ERROR: Failed to copy .env file" | tee -a "$LOG_FILE"; exit 1; }

            # Install dependencies
            
            # composer install
            echo "[$(env date +"%Y-%m-%d %H:%M:%S")] Installing composer dependencies" | tee -a "$LOG_FILE"
            composer install --no-interaction --no-dev --optimize-autoloader || { echo "ERROR: Composer install failed" | tee -a "$LOG_FILE"; exit 1; }
            echo "[$(env date +"%Y-%m-%d %H:%M:%S")] Completed Installing composer dependencies" | tee -a "$LOG_FILE"
            
            sleep 2

            # artisan migrate
            echo "Running database migrations" | tee -a "$LOG_FILE"
            php artisan migrate --force || { echo "ERROR: Artisan migrate failed" | tee -a "$LOG_FILE"; exit 1; }
            
            sleep 2

            # npm install
            echo "Installing npm dependencies" | tee -a "$LOG_FILE"
            npm install --prefer-offline --no-audit --legacy-peer-deps || { echo "ERROR: NPM install failed" | tee -a "$LOG_FILE"; exit 1; }
            echo "[$(env date +"%Y-%m-%d %H:%M:%S")] Complete Installing npm dependencies" | tee -a "$LOG_FILE"

            # npm run build
            echo "[$(env date +"%Y-%m-%d %H:%M:%S")] Building frontend assets" | tee -a "$LOG_FILE"
            npm run build || { echo "ERROR: NPM build failed" | tee -a "$LOG_FILE"; exit 1; }
            
            exit 1;
            
            # Ensure LIVE_PATH is removed if it's a directory or an old symlink
            echo "Removing existing $LIVE_PATH" | tee -a "$LOG_FILE"
            rm -rf "$LIVE_PATH"
            #if [ -d "$LIVE_PATH" ] || [ -L "$LIVE_PATH" ]; then
            #  echo "Removing existing $LIVE_PATH" | tee -a "$LOG_FILE"
            #fi
            
            # Create a new symlink pointing to the latest deployment
            echo "Creating new live symlink: $LIVE_PATH -> $DEPLOY_PATH" | tee -a "$LOG_FILE"
            ln -s "$DEPLOY_PATH" "$LIVE_PATH"
            echo "ln -s $DEPLOY_PATH $LIVE_PATH" | tee -a "$LOG_FILE"
            
            # Verify that the symlink was created correctly
            if [ "$(readlink "$LIVE_PATH")" != "$DEPLOY_PATH" ]; then
              echo "ERROR: Failed to create correct live symlink!  $LIVE_PATH = $(readlink "$LIVE_PATH") != $DEPLOY_PATH"
              #exit 1
            fi
            echo "Live symlink successfully updated to: $(readlink "$LIVE_PATH")" | tee -a "$LOG_FILE"

            # Clear Laravel cache
            echo "Clearing Laravel cache and optimize" | tee -a "$LOG_FILE"
            cd "$LIVE_LINK"
            php artisan cache:clear
            php artisan config:clear
            php artisan route:clear
            php artisan view:clear
            php artisan optimize
            
            echo "Restarting PHP-FPM to apply changes" | tee -a "$LOG_FILE"
            sudo systemctl restart php8.3-fpm || { echo "ERROR: Failed to restart PHP-FPM" | tee -a "$LOG_FILE"; exit 1; }

            # Keep only the last 5 deployments
            echo "Cleaning up old deployments" | tee -a "$LOG_FILE"
            cd "$DEPLOYMENTS_PATH"
            ls -t | tail -n +6 | xargs -I {} rm -rf {}

            # Keep only the last 10 log files
            echo "Cleaning up old log files" | tee -a "$LOG_FILE"
            cd "$LOG_PATH"
            ls -t | tail -n +11 | xargs -I {} rm {}

            eval echo "[$(env date +"%Y-%m-%d %H:%M:%S")] Deployment completed successfully!" | tee -a "$LOG_FILE"
          EOF